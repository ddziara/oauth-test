// The basic rule for TypeScript’s structural type system is that x is compatible with y if y has at least the same members as x. 

type x = {
  a: string;
}

type y = {
  a: string;
  b: number;
}

type y2 = {
  a: number;
}

const x_ci1: x = { a: "aaa" };
const y_ci1: y = { a: "eee", b: 1 };
const y2_ci1: y2 = { a: 1 };

let x_i1: x = y_ci1;   // OK
let y_i1: y = x_ci1;   // Invalid
let y_i2: x = y2_ci1;  // Invalid


// Be aware, however, that object literals may only specify known properties. For example, because we have explicitly specified that dog is of type Pet, 
// the following code is invalid:
//   let dog: Pet = { name: "Lassie", owner: "Rudd Weatherwax" }; // Error

let x_i2: x = { a: "sdfsda", b: "23232" }; // Invalid

// Comparing two functions
//
// To check if x is assignable to y, we first look at the parameter list. Each parameter in x must have a corresponding parameter 
// in y with a compatible type. Note that the names of the parameters are not considered, only their types. In this case, 
// every parameter of x has a corresponding compatible parameter in y, so the assignment is allowed.

type fx = (a: number) => number;
type fy = (b: number, c: string) => number;
type fz = (d: boolean) => number;
type fw = (a: number) => string;
type fp = (a: x) => void;
type fq = (a: y) => void;
type fs = (a: number, b?: boolean) => void;

const fx_ci1: fx = (par1: number): number => 0;
const fy_ci1: fy = (par2: number, par3: string) => 0;
const fz_ci1: fz = (par4: boolean): number => 0;
const fw_ci1: fw = (par5: number): string => "";
const fp_ci1: fp = (par6: x): void => {};
const fq_ci1: fq = (par7: y): void => {};

let fx_i1: fx = fy_ci1; // Invalid
let fy_i1: fx = fx_ci1; // OK
let fx_i2: fx = fz_ci1; // Invalid

// The type system enforces that the source function’s return type be a subtype of the target type’s return type.

let fx_i3: fx = fw_ci1; // Invalid

// Function Parameter Bivariance
// 
// When comparing the types of function parameters, assignment succeeds if either the source parameter is assignable to the target parameter, 
// or vice versa. This is unsound because a caller might end up being given a function that takes a more specialized type, 
// but invokes the function with a less specialized type. In practice, this sort of error is rare, and allowing this enables many common 
// JavaScript patterns. 

let fp_i1: fp = fq_ci1; // Unsound, but useful and common
let fq_i1: fq = fp_ci1; // OK

// Optional Parameters and Rest Parameters
//
// When comparing functions for compatibility, optional and required parameters are interchangeable. 
// Extra optional parameters of the source type are not an error, and optional parameters of the target type without corresponding 
// parameters in the source type are not an error.

// Enums
//
// Enums are compatible with numbers, and numbers are compatible with enums. Enum values from different enum types are considered 
// incompatible. For example,

// Classes
// 
// Classes work similarly to object literal types and interfaces with one exception: they have both a static and an instance type. 
// When comparing two objects of a class type, only members of the instance are compared. Static members and constructors do not 
// affect compatibility.

// Private and protected members in classes
//
// Private and protected members in a class affect their compatibility. When an instance of a class is checked for compatibility, 
// if the target type contains a private member, then the source type must also contain a private member that originated 
// from the same class. Likewise, the same applies for an instance with a protected member. This allows a class to be assignment 
// compatible with its super class, but not with classes from a different inheritance hierarchy which otherwise have the same shape.

// Generics
//
// Because TypeScript is a structural type system, type parameters only affect the resulting type when consumed as part of the type 
// of a member. 



// Subtype vs Assignment
//
// So far, we’ve used “compatible”, which is not a term defined in the language spec. In TypeScript, 
// there are two kinds of compatibility: subtype and assignment. These differ only in that assignment 
// extends subtype compatibility with rules to allow assignment to and from any, and to and from enum 
// with corresponding numeric values.



// /**
//  * Exclude null and undefined from T
//  */
// type NonNullable<T> = T & {};

type T1 = number | null | undefined;

type T2 = NonNullable<T1>;  // T2 = number

type T3 = T1 & { a: string };        // T3 = number & { a: string }

const xxx1: T3 = 2;               // Invalid          
const xxx2: T3 = { a: "dear" };   // Invalid


// /**
//  * Exclude from T those types that are assignable to U
//  */
// type Exclude<T, U> = T extends U ? never : T;

type T4 = Exclude<"a" | "b", "a">;

type T4a = string extends "a" ? never : string;  // string
type T4b = "a" extends string ? never : "a";     // never

const xxx5: string = "a";  // OK
let xxx6: string = "a";
const xxx7: "a" = xxx6;    // Invalid

type T4c = "a" | "b";

let xxx9 = "a" as const;

const xxx3: T4 = "b";  // OK
const xxx4: T4 = "a";  // Invalid

type T5 = Exclude<"a" | "b", { a: string; b: number }>;  // T5 = "a" | "b"  



type T6 = keyof { a: string; b: number };    // T6 = "a" | "b"


// /**
//  * From T, pick a set of properties whose keys are in the union K
//  */
// type Pick<T, K extends keyof T> = {
//     [P in K]: T[P];
// };

type T9 = Pick<{a: string; b: boolean}, "a">;  // { a: string }

// /**
//  * Construct a type with the properties of T except for those in type K.
//  */
// type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;

type T10 = Exclude<"a" | "b", "a">;   // "b"

type T11 = Omit<{ a: string; b: number; c: boolean }, "a">;  // { b: number; c: boolean }


type AnyFunction = (...args: any[]) => any;

/**
 * Type will be true is T is branded with Brand, false otherwise
 */
// How this works:
// - `A extends B` will be true if A has *at least* all the properties of B
// - If we do `A extends Omit<A, Checked>` - the result will only be true if A did not have Checked to begin with
// - So if we want to check if T is branded, we remove the brand, and check if they list of keys is still the same.
// we exclude Null & Undefined so "field: Brand<value> | null" is still detected as branded
// this is important because "Brand<value | null>" are transformed into "Brand<value> | null" to not break null & undefined
type IsBranded<T, Brand extends symbol> = keyof NonNullable<T> extends keyof Omit<NonNullable<T>, Brand>
  ? false
  : true;

const sym1 = Symbol();

type T12 = IsBranded<{a: "string"; b: number}, typeof sym1>;  // false
type T13 = IsBranded<{a: "string"; b: number; [sym1]: boolean}, typeof sym1>;  // true

type T14 = keyof Omit<NonNullable<{a: "string"; b: number}>, typeof sym1>;   // "b" | "a"
type T15 = keyof Omit<NonNullable<{a: "string"; b: number; [sym1]: boolean}>, typeof sym1>;  // "b" | "a"

/**
 * Dummy Symbol used as branding by {@link NonAttribute}.
 *
 * Do not export, Do not use.
 */
declare const NonAttributeBrand: unique symbol;

/**
 * Option bag for {@link InferAttributes}.
 *
 * - omit: properties to not treat as Attributes.
 */
type InferAttributesOptions<Excluded, > = { omit?: Excluded };

type T16 = InferAttributesOptions<number>;  // { omit?: number | undefined }

type Model = { a: string, b: number, c: boolean }

/**
 * @private
 *
 * Internal type used by {@link InferCreationAttributes} and {@link InferAttributes} to exclude
 * attributes that are:
 * - functions
 * - branded using {@link NonAttribute}
 * - inherited from {@link Model}
 * - Excluded manually using {@link InferAttributesOptions#omit}
 */
type InternalInferAttributeKeysFromFields<M extends Model, Key extends keyof M, Options extends InferAttributesOptions<keyof M | never | ''>> =
  // fields inherited from Model are all excluded
  Key extends keyof Model ? never
  // functions are always excluded
  : M[Key] extends AnyFunction ? never
  // fields branded with NonAttribute are excluded
  : IsBranded<M[Key], typeof NonAttributeBrand> extends true ? never
  // check 'omit' option is provided & exclude those listed in it
  : Options['omit'] extends string ? (Key extends Options['omit'] ? never : Key)
  : Key;


/**
 * Utility type to extract Attributes of a given Model class.
 *
 * It returns all instance properties defined in the Model, except:
 * - those inherited from Model (intermediate inheritance works),
 * - the ones whose type is a function,
 * - the ones manually excluded using the second parameter.
 * - the ones branded using {@link NonAttribute}
 *
 * It cannot detect whether something is a getter or not, you should use the `Excluded`
 * parameter to exclude getter & setters from the attribute list.
 *
 * @example
 * // listed attributes will be 'id' & 'firstName'.
 * class User extends Model<InferAttributes<User>> {
 *   id: number;
 *   firstName: string;
 * }
 *
 * @example
 * // listed attributes will be 'id' & 'firstName'.
 * // we're excluding the `name` getter & `projects` attribute using the `omit` option.
 * class User extends Model<InferAttributes<User, { omit: 'name' | 'projects' }>> {
 *   id: number;
 *   firstName: string;
 *
 *   // this is a getter, not an attribute. It should not be listed in attributes.
 *   get name(): string { return this.firstName; }
 *   // this is an association, it should not be listed in attributes
 *   projects?: Project[];
 * }
 *
 * @example
 * // listed attributes will be 'id' & 'firstName'.
 * // we're excluding the `name` getter & `test` attribute using the `NonAttribute` branded type.
 * class User extends Model<InferAttributes<User>> {
 *   id: number;
 *   firstName: string;
 *
 *   // this is a getter, not an attribute. It should not be listed in attributes.
 *   get name(): NonAttribute<string> { return this.firstName; }
 *   // this is an association, it should not be listed in attributes
 *   projects?: NonAttribute<Project[]>;
 * }
 */
type InferAttributes<
  M extends Model,
  Options extends InferAttributesOptions<keyof M | never | ''> = { omit: never }
  > = {
  [Key in keyof M as InternalInferAttributeKeysFromFields<M, Key, Options>]: M[Key]
};

type T100 = InferAttributesOptions<keyof { a: string; b: number } | never | ''>;  // { omit?: "" | "b" | "a" | undefined }

const xxx100: T100 = { omit: "a" };